{"version":3,"sources":["index.js"],"names":["route_dict","17_Ave","south_cross","north_cross","route_color","mapboxgl","accessToken","Application","props","_this","Object","_Users_saadiqmohiuddin_Documents_Coding_Data_Visualization_calgary_brt_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_saadiqmohiuddin_Documents_Coding_Data_Visualization_calgary_brt_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_saadiqmohiuddin_Documents_Coding_Data_Visualization_calgary_brt_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handle","bind","_Users_saadiqmohiuddin_Documents_Coding_Data_Visualization_calgary_brt_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","errordiv","connections","toggle_layer","state","lng","lat","zoom","max_route","stop_name","bus_query","active_route","active_conn","_this2","_this$state","map","Map","container","mapContainer","style","center","maxZoom","minZoom","on","geojson","addSource","type","data","max_lines","max_stops","features","feature","layer_name","properties","route_name","addLayer","id","source","paint","line-color","line-width","line-opacity","layout","line-join","line-cap","filter","circle-color","circle-radius","circle-opacity","popup","Popup","closeButton","closeOnClick","anchor","offset","stops","forEach","over","leave","click","value","_this3","setPaintProperty","setFilter","bounds","bbox","geometry","getPaintProperty","fitBounds","padding","top","bottom","left","right","output","arguments","length","undefined","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","placeholder","document","getElementById","text","ReactDOM","render","index","e","_this4","preventDefault","target","getAttribute","setState","fetch","then","response","json","error","className","getSource","setData","setLayoutProperty","remove","route","x","push","indexOf","getCanvas","cursor","_this5","_this6","f","queryRenderedFeatures","point","layers","connection","split","routeConnections","key","marginRight","onClick","fontWeight","fontSize","setLngLat","coordinates","setDOMContent","addTo","_this7","max_routes","label","line_style","height","background","borderRadius","marginBottom","ref","el","textAlign","href","React","Component"],"mappings":"20SAUIA,EAAa,CACfC,SAAU,aACVC,YAAe,WACfC,YAAe,cAGbC,EAAc,CAChBH,SAAU,SACVC,YAAe,OACfC,YAAe,UAGjBE,IAASC,YAAc,gGAEjBC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKU,SAAWV,EAAKU,SAASF,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAChBA,EAAKW,YAAcX,EAAKW,YAAYH,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKY,aAAeZ,EAAKY,aAAaJ,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKa,MAAQ,CACXC,KAAM,SACNC,IAAK,QACLC,KAAM,GACNC,UAAW,SACXC,UAAW,GACXP,YAAa,GACbQ,UAAW,KACXC,aAAc,KACdC,YAAa,MAfErB,mFAmBC,IAAAsB,EAAAnB,KAAAoB,EAEQpB,KAAKU,MAAxBC,EAFWS,EAEXT,IAAKC,EAFMQ,EAENR,IAAKC,EAFCO,EAEDP,KACjBb,KAAKqB,IAAM,IAAI5B,IAAS6B,IAAI,CAC1BC,UAAWvB,KAAKwB,aAChBC,MAAO,oDACPC,OAAQ,CAACf,EAAKC,GACdC,KAAMA,EACNc,QAAS,GACTC,QAAS,OAGX5B,KAAKqB,IAAIQ,GAAG,OAAQ,WAElB,IAAIC,EAAU,uEAAuEX,EAAKT,MAAMM,UAAU,qBAE1GG,EAAKE,IAAIU,UAAU,YAAa,CAC9BC,KAAM,UACNC,KAAMH,IAGRX,EAAKE,IAAIU,UAAU,aAAc,CAC/BC,KAAM,UACNC,KAAMC,IAERf,EAAKE,IAAIU,UAAU,YAAa,CAC9BC,KAAM,UACNC,KAAME,IAGRD,EAAUE,SAASf,IAAI,SAACgB,GACtB,IAAIC,EAAaD,EAAQE,WAAWC,WACpC,OAAOrB,EAAKE,IAAIoB,SAAS,CACrBC,GAAMJ,EACNN,KAAQ,OACRW,OAAU,aACVC,MAAS,CACLC,aAAc,CACZ,QACA,CAAC,MAAO,cACR,cAAe,OACf,cAAe,SACf,SAAU,SACV,QAEFC,aAAc,GACdC,eAAgB,IAEpBC,OAAU,CACNC,YAAa,QACbC,WAAY,SAEhBC,OAAU,CAAC,KAAM,aAAcb,OAKrCnB,EAAKE,IAAIoB,SAAS,CACdC,GAAM,YACNV,KAAQ,OACRW,OAAU,YACVC,MAAS,CACLC,aAAc,MACdC,aAAc,EACdC,eAAgB,IAEpBC,OAAU,CACNC,YAAa,QACbC,WAAY,WAIpB/B,EAAKE,IAAIoB,SAAS,CACdC,GAAM,YACNV,KAAQ,SACRW,OAAU,YACVC,MAAS,CACLQ,eAAgB,QAChBC,gBAAgB,EAChBC,iBAAkB,IAEtBH,OAAU,CAAC,KAAM,aAAc,MAGnChC,EAAKE,IAAIoB,SAAS,CACdC,GAAM,gBACNV,KAAQ,SACRW,OAAU,YACVC,MAAS,CACLQ,eAAgB,QAChBC,gBAAgB,GAChBC,iBAAkB,GAEtBH,OAAU,CAAC,KAAM,YAAa,QAMpCnD,KAAKuD,MAAQ,IAAI9D,IAAS+D,MAAM,CACxBC,aAAa,EACbC,cAAc,EACdC,OAAQ,cACRC,OAAQ,CAAC,GAAG,MAGpB5D,KAAKqB,IAAIQ,GAAG,YAAY,YAAY7B,KAAK6D,MAAMxD,KAAKL,OAEpDkC,EAAUE,SAAS0B,QAAQ,SAACzB,GAC1B,IAAIC,EAAaD,EAAQE,WAAWC,WACpCrB,EAAKE,IAAIQ,GAAG,aAAaS,EAAYnB,EAAK4C,KAAK1D,KAAKc,IACpDA,EAAKE,IAAIQ,GAAG,aAAcS,EAAYnB,EAAK6C,MAAM3D,KAAKc,IACtDA,EAAKE,IAAIQ,GAAG,QAASS,EAAYnB,EAAK8C,MAAM5D,KAAKc,2CAKxC+C,GAAM,IAAAC,EAAAnE,KACjBkC,EAAUE,SAAS0B,QAAQ,SAACzB,GAC1B,IAAIC,EAAaD,EAAQE,WAAWC,WAEpC,GAAGF,IAAa4B,EAAM,CACpBC,EAAK9C,IAAI+C,iBAAiBF,EAAO,eAAgB,GACjDC,EAAK9C,IAAIgD,UAAU,YAAY,CAAC,KAAM,aAAcH,IAEpD,IAAII,EAAQC,eAAKlC,EAAQmC,UAE+B,IAArDL,EAAK9C,IAAIoD,iBAAiBP,EAAO,iBAClCC,EAAK9C,IAAIqD,UAAUJ,EAAQ,CACzBK,QAAS,CAACC,IAAK,GAAIC,OAAO,GAAIC,KAAM,GAAIC,MAAO,WAInDZ,EAAK9C,IAAI+C,iBAAiB9B,EAAY,eAAgB,yCAMhC,IAAnB0C,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZG,EAAAC,EAAAC,cAAA,YACRC,EAAcC,SAASC,eAAe,SACxCC,EAAOV,EACXW,IAASC,OAAOF,EAAMH,uCAGZM,EAAOC,GAAE,IAAAC,EAAA/F,KAEnB8F,EAAEE,iBACF,IAAI9B,EAAQ4B,EAAEG,OAAOC,aAAa,SAClClG,KAAKmG,SAAS,CAAEjF,YAAa2E,IAE7B7F,KAAKmG,SAAS,CAACnF,UAAWkD,GAAQ,WAChC,IAAIpC,EAAU,uEAAuEiE,EAAKrF,MAAMM,UAAU,qBAE1GoF,MAAMtE,GACHuE,KAAK,SAAAC,GACF,OAAOA,EAASC,SACjBF,KAAK,SAAApE,GAEN,IACE,IAAIqC,EAAQC,eAAKtC,GACjB8D,EAAK1E,IAAIqD,UAAUJ,EAAQ,CACzBK,QAAS,CAACC,IAAK,IAAKC,OAAO,IAAKC,KAAM,IAAKC,MAAO,OAEpDgB,EAAKxF,WAEP,MAAMiG,GACJT,EAAKxF,SAAS6E,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cAAf,uCAIpBV,EAAK1E,IAAIqF,UAAU,aAAaC,QAAQ7E,GACxCiE,EAAK1E,IAAIuF,kBAAkB,YAAa,aAAc,4CAMnDf,EAAOC,GACZA,EAAEE,iBAEFhG,KAAKmG,SAAS,CAAElF,aAAc4E,EAAO3E,YAAY,KAAKF,UAAW,KAAMR,YAAY,GAAIO,UAAU,KAEjG,IAAImD,EAAQ4B,EAAEG,OAAOC,aAAa,SAElClG,KAAKS,aAAayD,GAClBlE,KAAKqB,IAAIuF,kBAAkB,YAAa,aAAc,QACtD5G,KAAKuD,MAAMsD,SAEX7G,KAAKO,yCAIDuF,GACJA,EAAEE,iBACF,IAAI9B,EAAQ4B,EAAE1D,SAAS,GAAGG,WAAWC,WAEjCsE,EAAQ,GACZ5E,EAAUE,SAAS0B,QAAQ,SAAAiD,GAAC,OAAID,EAAME,KAAKD,EAAExE,WAAWC,cACxD,IAAIqD,EAAQiB,EAAMG,QAAQ/C,GAE1BlE,KAAKmG,SAAS,CAAElF,aAAc4E,EAAO3E,YAAY,KAAMF,UAAW,OAClEhB,KAAKS,aAAayD,GAClBlE,KAAKqB,IAAIuF,kBAAkB,YAAa,aAAc,QAEtD5G,KAAKO,wCAIFuF,GACH,IAAIgB,EAAQhB,EAAE1D,SAAS,GAAGG,WAAWC,WACrCxC,KAAKqB,IAAI6F,YAAYzF,MAAM0F,OAAS,UACoB,IAArDnH,KAAKqB,IAAIoD,iBAAiBqC,EAAO,iBAClC9G,KAAKqB,IAAI+C,iBAAiB0C,EAAO,eAAgB,kCAI/ChB,GAAE,IAAAsB,EAAApH,KACNA,KAAKqB,IAAI6F,YAAYzF,MAAM0F,OAAS,GACpCjF,EAAUE,SAAS0B,QAAQ,SAACzB,GAC1B,IAAIyE,EAAQzE,EAAQE,WAAWC,WACyB,IAArD4E,EAAK/F,IAAIoD,iBAAiBqC,EAAO,iBAClCM,EAAK/F,IAAI+C,iBAAiB0C,EAAO,eAAgB,oCAKjDhB,GAAE,IAAAuB,EAAArH,KAEFsH,EAAItH,KAAKqB,IAAIkG,sBAAsBzB,EAAE0B,MAAO,CAAEC,OAAQ,CAAC,eAG3D,GAFAzH,KAAKmG,SAAS,CAAEjF,YAAa,OAE1BoG,EAAEpC,OAAS,EAAE,CACdlF,KAAKmG,SAAS,CACZpF,UAAUuG,EAAE,GAAG/E,WAAWxB,UAC1BP,YAAY8G,EAAE,GAAG/E,WAAWmF,WAAWC,MAAM,OAG/C3H,KAAKqB,IAAIgD,UAAU,gBAAgB,CAAC,KAAM,YAAarE,KAAKU,MAAMK,YAElE,IAAI6G,EAAmB5H,KAAKU,MAAMF,YAAYa,IAAI,SAAC0F,EAAGlB,GAOpD,MALO,SAAJkB,EACQ3B,EAAAC,EAAAC,cAAA,QAAMpB,MAAO6C,EAAGc,IAAKd,GAArB,kBAEA3B,EAAAC,EAAAC,cAAA,QAAM7D,MAAO,CAACqG,YAAY,OAAQC,QAASV,EAAK7G,YAAYH,KAAKgH,EAAMxB,GAAQ3B,MAAO6C,EAAGc,IAAKd,GAAIA,KAK3GrB,EAAON,EAAAC,EAAAC,cAAA,WAAMtF,KAAKU,MAAMK,UAAUqE,EAAAC,EAAAC,cAAA,WAA3B,IAAiCF,EAAAC,EAAAC,cAAA,QAAM7D,MAAO,CAACuG,WAAW,UAAWC,SAAS,OAAQd,OAAQ,YAAaS,IAEhHrC,EAAcC,SAASF,cAAc,OAC3CK,IAASC,OAAOF,EAAMH,GAEtBvF,KAAKuD,MAAM2E,UAAUZ,EAAE,GAAG9C,SAAS2D,aAAaC,cAAc7C,GAAa8C,MAAMrI,KAAKqB,uCAKjF,IAAAiH,EAAAtI,KAEHuI,EAAarG,EAAUE,SAASf,IAAI,SAAC0F,EAAGlB,GAE1C,IAAI3B,EAAQ6C,EAAExE,WAAWC,WACrBgG,EAAQpJ,EAAW2H,EAAExE,WAAWC,YAE9BiG,EAAa,CAACC,OAAO,MAAOC,WAAWnJ,EAAYuH,EAAExE,WAAWC,YAAcoG,aAAa,OAEjG,OAAQxD,EAAAC,EAAAC,cAAA,MAAI7D,MAAO,CAACoH,aAAc,QAAQpC,UAAW6B,EAAK5H,MAAMO,eAAe4E,EAAQ,aAAc,eAAgBkC,QAASO,EAAKlI,OAAOC,KAAKiI,EAAMzC,GAAQ3B,MAAQA,EAAO2D,IAAK3D,GAAQsE,EAAjL,KAAyLpD,EAAAC,EAAAC,cAAA,MAAI7D,MAAOgH,OAM1Mb,EAAmB5H,KAAKU,MAAMF,YAAYa,IAAI,SAAC0F,EAAGlB,GAOpD,MALO,SAAJkB,EACQ3B,EAAAC,EAAAC,cAAA,QAAMmB,UAAU,aAAavC,MAAO6C,EAAGc,IAAKd,GAA5C,kBAEA3B,EAAAC,EAAAC,cAAA,QAAMmB,UAAW6B,EAAK5H,MAAMQ,cAAc2E,EAAQ,WAAY,aAAckC,QAASO,EAAK9H,YAAYH,KAAKiI,EAAMzC,GAAQ3B,MAAO6C,EAAGc,IAAKd,GAAIA,KAMzJ,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKwD,IAAK,SAAAC,GAAE,OAAIT,EAAK9G,aAAeuH,GAAItC,UAAU,mCAElDrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cAEbrB,EAAAC,EAAAC,cAAA,4CAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGiD,IAGLnD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAKtF,KAAKU,MAAMK,WACdqE,EAAAC,EAAAC,cAAA,OAAK7D,MAAS,CAACuH,UAAW,WACvBpB,GAELxC,EAAAC,EAAAC,cAAA,OAAK5C,GAAG,UAER0C,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,UACbrB,EAAAC,EAAAC,cAAA,uCAAgCF,EAAAC,EAAAC,cAAA,KAAG2D,KAAK,2CAAR,+BAzUlBC,IAAMC,WAmVhCxD,IAASC,OAAOR,EAAAC,EAAAC,cAAC3F,EAAD,MAAiB6F,SAASC,eAAe","file":"static/js/main.bc681e12.chunk.js","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport mapboxgl from 'mapbox-gl'\nimport max_lines from './max_lines.json'\nimport max_stops from './max_stops.json'\nimport { bbox } from '@turf/turf'\n\nlet route_dict = {\n  '17_Ave': \"MAX PURPLE\",\n  \"south_cross\": 'MAX TEAL',\n  'north_cross': 'MAX ORANGE'\n};\n\nlet route_color = {\n  '17_Ave': \"purple\",\n  \"south_cross\": 'teal',\n  'north_cross': 'orange'\n};\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2FhZGlxbSIsImEiOiJjamJpMXcxa3AyMG9zMzNyNmdxNDlneGRvIn0.wjlI8r1S_-xxtq2d-W5qPA';\n\nclass Application extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handle = this.handle.bind(this)\n    this.errordiv = this.errordiv.bind(this)\n    this.connections = this.connections.bind(this)\n    this.toggle_layer = this.toggle_layer.bind(this)\n    this.state = {\n      lng: -114.0708,\n      lat: 51.0486,\n      zoom: 11,\n      max_route: '17_ave',\n      stop_name: \"\",\n      connections: [],\n      bus_query: null,\n      active_route: null,\n      active_conn: null\n    };\n  }\n\n  componentDidMount() {\n\n    const {lng, lat, zoom } = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/saadiqm/cjbjougmt08z72rsa7me1duoi',\n      center: [lng, lat],\n      zoom: zoom,\n      maxZoom: 13,\n      minZoom: 10.5,\n    });\n\n    this.map.on('load', () => {\n\n      let geojson = 'https://data.calgary.ca/resource/hpnd-riq4.geojson?route_short_name='+this.state.bus_query+'&$select=multiline'\n\n      this.map.addSource('Bus Route', {\n        type: 'geojson',\n        data: geojson\n      });\n\n      this.map.addSource('Max Routes', {\n        type: 'geojson',\n        data: max_lines\n      });\n      this.map.addSource('Max Stops', {\n        type: 'geojson',\n        data: max_stops\n      });\n\n      max_lines.features.map((feature)=>{\n        let layer_name = feature.properties.route_name\n        return this.map.addLayer({\n            \"id\": layer_name,\n            \"type\": \"line\",\n            \"source\": 'Max Routes',\n            \"paint\": {\n                \"line-color\": [\n                  'match',\n                  ['get', 'route_name'],\n                  'south_cross', 'teal',\n                  'north_cross', 'orange',\n                  '17_Ave', 'purple',\n                  'blue'\n                ],\n                \"line-width\": 10,\n                \"line-opacity\": 0.3\n            },\n            \"layout\": {\n                \"line-join\": \"round\",\n                \"line-cap\": \"round\"\n            },\n            \"filter\": [\"==\", \"route_name\", layer_name]\n        });\n\n      });\n\n      this.map.addLayer({\n          \"id\": \"Bus Route\",\n          \"type\": \"line\",\n          \"source\": 'Bus Route',\n          \"paint\": {\n              \"line-color\": \"red\",\n              \"line-width\": 4,\n              \"line-opacity\": 0.4\n          },\n          \"layout\": {\n              \"line-join\": \"round\",\n              \"line-cap\": \"round\"\n          },\n      });\n\n      this.map.addLayer({\n          \"id\": \"Max Stops\",\n          \"type\": \"circle\",\n          \"source\": 'Max Stops',\n          \"paint\": {\n              \"circle-color\": \"white\",\n              'circle-radius':9,\n              \"circle-opacity\": 0.6\n          },\n          \"filter\": [\"==\", \"route_name\", '']\n      });\n\n      this.map.addLayer({\n          \"id\": \"Selected Stop\",\n          \"type\": \"circle\",\n          \"source\": 'Max Stops',\n          \"paint\": {\n              \"circle-color\": \"white\",\n              'circle-radius':11,\n              \"circle-opacity\": 1.0\n          },\n          \"filter\": [\"==\", \"stop_name\", '']\n      });\n\n\n    });\n\n    this.popup = new mapboxgl.Popup({\n            closeButton: false,\n            closeOnClick: false,\n            anchor: 'bottom-left',\n            offset: [5,-20]\n    });\n\n    this.map.on('mouseover',\"Max Stops\",this.stops.bind(this));\n\n    max_lines.features.forEach((feature)=>{\n      let layer_name = feature.properties.route_name\n      this.map.on('mouseenter',layer_name, this.over.bind(this));\n      this.map.on('mouseleave', layer_name, this.leave.bind(this));\n      this.map.on('click', layer_name, this.click.bind(this));\n    });\n\n  }\n\n  toggle_layer(value){\n    max_lines.features.forEach((feature)=>{\n      let layer_name = feature.properties.route_name\n\n      if(layer_name===value){\n        this.map.setPaintProperty(value, 'line-opacity', 1);\n        this.map.setFilter('Max Stops',['==', 'route_name', value])\n\n        let bounds= bbox(feature.geometry);\n\n        if(this.map.getPaintProperty(value, 'line-opacity') === 1){\n          this.map.fitBounds(bounds, {\n            padding: {top: 50, bottom:50, left: 50, right: 50}\n          });\n        }\n      }else{\n        this.map.setPaintProperty(layer_name, 'line-opacity', 0.4);\n      }\n\n    });\n  }\n\n  errordiv(output=<div></div>){\n    const placeholder = document.getElementById(\"error\");\n    let text = output\n    ReactDOM.render(text, placeholder);\n  }\n\n  connections(index, e){\n\n    e.preventDefault();\n    let value = e.target.getAttribute('value')\n    this.setState({ active_conn: index });\n\n    this.setState({bus_query: value}, () => { //update selected bus route\n      let geojson = 'https://data.calgary.ca/resource/hpnd-riq4.geojson?route_short_name='+this.state.bus_query+'&$select=multiline'\n\n      fetch(geojson)\n        .then(response => {\n            return response.json();\n        }).then(data => {\n\n          try{\n            let bounds= bbox(data); //find bounding box using Turf\n            this.map.fitBounds(bounds, {\n              padding: {top: 100, bottom:100, left: 100, right: 100}\n            });\n            this.errordiv()\n          }\n          catch(error) {\n            this.errordiv(<div className=\"bus_select\">This bus route is not available</div>)\n          }\n        });\n\n      this.map.getSource('Bus Route').setData(geojson);\n      this.map.setLayoutProperty('Bus Route', 'visibility', 'visible');\n\n    })\n\n  }\n\n  handle(index, e){\n    e.preventDefault();\n\n    this.setState({ active_route: index, active_conn:null,bus_query: null, connections:[], stop_name:'' });\n\n    let value = e.target.getAttribute('value')\n\n    this.toggle_layer(value)\n    this.map.setLayoutProperty('Bus Route', 'visibility', 'none');\n    this.popup.remove()\n\n    this.errordiv()\n\n  }\n\n  click(e){\n    e.preventDefault();\n    let value = e.features[0].properties.route_name\n\n    let route = []\n    max_lines.features.forEach(x => route.push(x.properties.route_name))\n    let index = route.indexOf(value)\n\n    this.setState({ active_route: index, active_conn:null, bus_query: null});\n    this.toggle_layer(value)\n    this.map.setLayoutProperty('Bus Route', 'visibility', 'none');\n\n    this.errordiv()\n\n  }\n\n  over(e){\n    let route = e.features[0].properties.route_name\n    this.map.getCanvas().style.cursor = 'pointer';\n    if(this.map.getPaintProperty(route, 'line-opacity') !== 1){\n      this.map.setPaintProperty(route, 'line-opacity', 0.8);\n    }\n  }\n\n  leave(e){\n    this.map.getCanvas().style.cursor = '';\n    max_lines.features.forEach((feature)=>{\n      let route = feature.properties.route_name\n      if(this.map.getPaintProperty(route, 'line-opacity') !== 1){\n        this.map.setPaintProperty(route, 'line-opacity', 0.4);\n      }\n    });\n  }\n\n  stops(e){\n\n    let f = this.map.queryRenderedFeatures(e.point, { layers: ['Max Stops'] });\n    this.setState({ active_conn: null });\n\n    if(f.length > 0){\n      this.setState({\n        stop_name:f[0].properties.stop_name,\n        connections:f[0].properties.connection.split(',')\n      });\n\n      this.map.setFilter('Selected Stop',['==', 'stop_name', this.state.stop_name])\n\n      let routeConnections = this.state.connections.map((x, index) => {\n        let output\n        if(x===\"null\"){\n          output = <span value={x} key={x}>No Connections</span>\n        }else{\n          output = <span style={{marginRight:\"5px\"}} onClick={this.connections.bind(this, index)} value={x} key={x}>{x}</span>\n        }\n        return output\n      });\n\n      let text = <div>{this.state.stop_name}<br/> <span style={{fontWeight:'lighter', fontSize:'14px', cursor: 'pointer'}}>{routeConnections}</span></div>\n\n      const placeholder = document.createElement('div');\n      ReactDOM.render(text, placeholder);\n\n      this.popup.setLngLat(f[0].geometry.coordinates).setDOMContent(placeholder).addTo(this.map);\n    }\n\n  }\n\n  render() {\n\n    let max_routes = max_lines.features.map((x, index) => {\n\n      let value = x.properties.route_name;\n      let label = route_dict[x.properties.route_name]\n\n      const line_style = {height:'3px', background:route_color[x.properties.route_name],  borderRadius:'8px'}\n\n      return  <li style={{marginBottom: '10px'}}className={this.state.active_route===index ? 'route_list': 'route_select'} onClick={this.handle.bind(this, index)} value ={value} key={value}>{label}  <hr style={line_style} /></li>\n\n\n\n    });\n\n    let routeConnections = this.state.connections.map((x, index) => {\n      let output\n      if(x===\"null\"){\n        output = <span className='bus_select' value={x} key={x}>No Connections</span>\n      }else{\n        output = <span className={this.state.active_conn===index ? 'bus_list': 'bus_select'} onClick={this.connections.bind(this, index)} value={x} key={x}>{x}</span>\n      }\n      return output\n    });\n\n\n    return (\n      <div>\n        <div ref={el => this.mapContainer = el} className=\"absolute top right left bottom\" />\n\n        <div className=\"border_box\">\n\n          <h1>CALGARY TRANSIT BRT SYSTEM MAP</h1>\n\n          <div>\n            <ul>\n              {max_routes}\n            </ul>\n          </div>\n          <br/>\n\n          <h2>{this.state.stop_name}</h2>\n            <div style = {{textAlign: 'center'}}>\n              {routeConnections}\n            </div>\n          <div id=\"error\"></div>\n\n          <div className='byline'>\n            <h4>&copy;2018 Saadiq Mohiuddin <a href=\"https://www.twitter.com/saadiqmohiuddin\">@saadiqmohiuddin</a></h4>\n          </div>\n\n\n        </div>\n      </div>\n\n    );\n  }\n}\nReactDOM.render(<Application />, document.getElementById('root'));\n"],"sourceRoot":""}